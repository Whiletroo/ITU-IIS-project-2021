// <auto-generated />
using System;
using Charity.DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Charity.DAL.Migrations
{
    [DbContext(typeof(CharityDbContext))]
    partial class CharityDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Charity.DAL.Entities.AdminEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhotoURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Admins");

                    b.HasData(
                        new
                        {
                            Id = new Guid("35bfc454-ff3c-4079-92ab-52c3060be8a1"),
                            Email = "admin@shelterio.com",
                            FirstName = "Guy",
                            LastName = "Super",
                            Password = "verysecurepass",
                            Phone = "+420777111222",
                            PhotoURL = "",
                            Role = "admin"
                        });
                });

            modelBuilder.Entity("Charity.DAL.Entities.DonationEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Goal")
                        .HasColumnType("int");

                    b.Property<string>("PhotoURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ShelterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("State")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ShelterId");

                    b.ToTable("Donations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("5af6bbb5-a2ae-433a-b999-d7b3891eb51b"),
                            DateTime = new DateTime(2021, 12, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Donate cute dog lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean malesuada lacus tortor, at rutrum ante dictum nec. Proin sodales porttitor lorem ut dictum. Pellentesque fringilla vulputate luctus. Nam sollicitudin risus id libero commodo aliquam. Duis ut feugiat neque. In elementum turpis quis odio ultrices, eget fermentum elit malesuada. Ut sit amet imperdiet massa. Suspendisse urna nisl, cursus eu pharetra eget, tincidunt ut neque.",
                            Goal = 1000,
                            PhotoURL = "https://www.expats.cz/images/publishing/articles/2019/11/1280_650/go-cuddle-in-kadlin-handipet-rescue-animal-shelter-is-seeking-volunteers-jpg-xpmac.jpg",
                            ShelterId = new Guid("7600763f-6a2e-482c-9ded-fa9a824376e5"),
                            State = 200,
                            Title = "Doggie donation"
                        });
                });

            modelBuilder.Entity("Charity.DAL.Entities.EnrollmentEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("VolunteerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("VolunteeringId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("VolunteerId");

                    b.HasIndex("VolunteeringId");

                    b.ToTable("Enrollments");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b9f0731b-3b02-48a2-88ce-7d7fd48a4d2a"),
                            DateTime = new DateTime(2021, 11, 20, 17, 26, 50, 0, DateTimeKind.Unspecified),
                            VolunteerId = new Guid("952f40f0-8181-4cc6-aff8-d932e002d98f"),
                            VolunteeringId = new Guid("9a2625c7-9008-403f-8d0e-c5257a5e9af5")
                        });
                });

            modelBuilder.Entity("Charity.DAL.Entities.ShelterAdminEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhotoURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ShelterId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("ShelterAdmins");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2ea469b7-70e9-4810-b679-0a60ab205f16"),
                            Email = "johndoe@superdoggies.com",
                            FirstName = "John",
                            LastName = "Doe",
                            Password = "doggiepass",
                            Phone = "+420666555444",
                            PhotoURL = "",
                            Role = "shelter-admin",
                            ShelterId = new Guid("7600763f-6a2e-482c-9ded-fa9a824376e5")
                        });
                });

            modelBuilder.Entity("Charity.DAL.Entities.ShelterEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("AdminId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhotoURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AdminId")
                        .IsUnique()
                        .HasFilter("[AdminId] IS NOT NULL");

                    b.ToTable("Shelters");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7600763f-6a2e-482c-9ded-fa9a824376e5"),
                            AdminId = new Guid("2ea469b7-70e9-4810-b679-0a60ab205f16"),
                            Description = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Integer sit amet lectus ligula. Aliquam tincidunt a ex et viverra. Nam dignissim egestas urna, et lobortis erat aliquet vitae. Aenean bibendum magna est, eu iaculis tortor blandit quis. Integer vestibulum sapien at velit pretium, sed sollicitudin mi scelerisque. Donec vitae auctor urna. In faucibus turpis turpis, et finibus purus imperdiet et. Nulla sed magna orci. Cras tortor urna, dictum nec ligula et, vehicula consectetur lorem. Aenean quis pharetra ipsum, eget malesuada ligula. Donec sed consectetur eros. Integer aliquam lacinia nisl, nec condimentum arcu pellentesque a. Aliquam vel odio lectus. Sed eget est nisl. Curabitur at sapien in tellus dapibus feugiat. Maecenas dolor sem, volutpat id tempus ut, iaculis a dolor.",
                            PhotoURL = "https://www.logolynx.com/images/logolynx/3b/3b4e5f16f0ccd5f02f4c3f5fa68031e9.jpeg",
                            Title = "Super Doggies"
                        });
                });

            modelBuilder.Entity("Charity.DAL.Entities.TransactionEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("DonationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Sum")
                        .HasColumnType("int");

                    b.Property<Guid>("VolunteerId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("DonationId");

                    b.HasIndex("VolunteerId");

                    b.ToTable("Transactions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7600763f-6a2e-482c-9ded-fa9a824376e5"),
                            DateTime = new DateTime(2021, 10, 21, 11, 20, 15, 0, DateTimeKind.Unspecified),
                            DonationId = new Guid("5af6bbb5-a2ae-433a-b999-d7b3891eb51b"),
                            Sum = 100,
                            VolunteerId = new Guid("952f40f0-8181-4cc6-aff8-d932e002d98f")
                        });
                });

            modelBuilder.Entity("Charity.DAL.Entities.VolunteerEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhotoURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Volunteers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("952f40f0-8181-4cc6-aff8-d932e002d98f"),
                            Email = "janedoe@mail.com",
                            FirstName = "Jane",
                            LastName = "Sue",
                            Password = "suepass",
                            Phone = "+420555444222",
                            PhotoURL = "https://scontent-prg1-1.xx.fbcdn.net/v/t39.30808-6/214664454_3054028748220135_5232530489626250445_n.jpg?_nc_cat=110&ccb=1-5&_nc_sid=09cbfe&_nc_ohc=jvZz0yhGArwAX-FAACl&tn=mRRjwhJuYUsf6LX7&_nc_ht=scontent-prg1-1.xx&oh=a1ff46a61f59ff521bcc67f9083cd5f2&oe=61A900D7",
                            Role = "volunteer"
                        });
                });

            modelBuilder.Entity("Charity.DAL.Entities.VolunteeringEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhotoURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RequiredCount")
                        .HasColumnType("int");

                    b.Property<Guid>("ShelterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ShelterId");

                    b.ToTable("Volunteerings");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9a2625c7-9008-403f-8d0e-c5257a5e9af5"),
                            DateTime = new DateTime(2020, 4, 12, 10, 34, 42, 0, DateTimeKind.Unspecified),
                            Description = "Help as volunteer",
                            PhotoURL = "https://i.ebayimg.com/images/g/hXoAAOSwQnpgblRI/s-l300.jpg",
                            RequiredCount = 4,
                            ShelterId = new Guid("7600763f-6a2e-482c-9ded-fa9a824376e5"),
                            Title = "Volunteer Super Doggies"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "f7eea789-ae98-40d3-843e-ef44deb82ba3",
                            ConcurrencyStamp = "81fced2a-5848-49fe-b336-920bbe296cbc",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        },
                        new
                        {
                            Id = "3f3099cd-47e9-403c-9919-686da947ff5f",
                            ConcurrencyStamp = "4adff49a-d4ac-437a-a3bc-77323e109e44",
                            Name = "Volunteer",
                            NormalizedName = "VOLUNTEER"
                        },
                        new
                        {
                            Id = "6293c9c0-a0dc-4567-9da1-f5b420d89712",
                            ConcurrencyStamp = "490dae8c-1325-4ee9-9e7a-af7c706d8633",
                            Name = "ShelterAdministrator",
                            NormalizedName = "SHELTERADMINISTRATOR"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Charity.DAL.Entities.DonationEntity", b =>
                {
                    b.HasOne("Charity.DAL.Entities.ShelterEntity", "Shelter")
                        .WithMany("Donations")
                        .HasForeignKey("ShelterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Shelter");
                });

            modelBuilder.Entity("Charity.DAL.Entities.EnrollmentEntity", b =>
                {
                    b.HasOne("Charity.DAL.Entities.VolunteerEntity", "Volunteer")
                        .WithMany("Enrollments")
                        .HasForeignKey("VolunteerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Charity.DAL.Entities.VolunteeringEntity", "Volunteering")
                        .WithMany("Enrollments")
                        .HasForeignKey("VolunteeringId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Volunteer");

                    b.Navigation("Volunteering");
                });

            modelBuilder.Entity("Charity.DAL.Entities.ShelterEntity", b =>
                {
                    b.HasOne("Charity.DAL.Entities.ShelterAdminEntity", "Admin")
                        .WithOne("Shelter")
                        .HasForeignKey("Charity.DAL.Entities.ShelterEntity", "AdminId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Admin");
                });

            modelBuilder.Entity("Charity.DAL.Entities.TransactionEntity", b =>
                {
                    b.HasOne("Charity.DAL.Entities.DonationEntity", "Donation")
                        .WithMany("Transactions")
                        .HasForeignKey("DonationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Charity.DAL.Entities.VolunteerEntity", "Volunteer")
                        .WithMany("Transactions")
                        .HasForeignKey("VolunteerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Donation");

                    b.Navigation("Volunteer");
                });

            modelBuilder.Entity("Charity.DAL.Entities.VolunteeringEntity", b =>
                {
                    b.HasOne("Charity.DAL.Entities.ShelterEntity", "Shelter")
                        .WithMany("Volunteerings")
                        .HasForeignKey("ShelterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Shelter");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Charity.DAL.Entities.DonationEntity", b =>
                {
                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("Charity.DAL.Entities.ShelterAdminEntity", b =>
                {
                    b.Navigation("Shelter");
                });

            modelBuilder.Entity("Charity.DAL.Entities.ShelterEntity", b =>
                {
                    b.Navigation("Donations");

                    b.Navigation("Volunteerings");
                });

            modelBuilder.Entity("Charity.DAL.Entities.VolunteerEntity", b =>
                {
                    b.Navigation("Enrollments");

                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("Charity.DAL.Entities.VolunteeringEntity", b =>
                {
                    b.Navigation("Enrollments");
                });
#pragma warning restore 612, 618
        }
    }
}
